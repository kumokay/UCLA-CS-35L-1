004800083 Michael Gee

Exercise 1.1

1. 

e m a c s SP e x e r 1 . h t m l Enter

2. 
C-s H T M L Enter 

3. 

C-s s c a v e n g e r Enter M-b

4. 
C-s s e l f - r e f e r e n t i a l Enter M-b M-b 

5.
C-s a r r o w Enter M-b 

6. 
C-e

7. C-a 

8. 
Yeah, I was able to save a lot of time by using C-s to search
for words and using C-e and C-a
to go to the front and back of the lines.  

9. 
No

10. 
C-x C-c 

--------------------------------------------
Exercise 1.2   

1. 
e m a c s SP e x e r 2 . h t m l Enter 

2. 
M-g g 1 8 Enter C-k

3. 
C-s D E L Enter C-a C-k

4. 
C-s w i k i /  M-h Backspace

5. 

C-s < ! C-b C-b C-u 7 C-d
C-s O r M-h Up Backspace
C-s < ! C-a C-k 

Exercise 1.3 

1. 
e m a c s SP e x e r 3 . h t m l

2. 
C-s A s s i g n m e n t SP 1 Enter Backspace 5 1


3. 
C-s U T F - 8 Enter 
Backspace Backspace Backspace Backspace Backspace
U S - A S C I I

4. 

C-s < / o l > Enter C-p C-e Enter

5. 
C-x C-c y 

Exercise 1.4 
1. 
c a t SP e x e r 2 . h t m l SP e x e r 2 . d i f f SP > e x e r 4 . h t m l

2. 
e m a c s SP e x e r 4 . h t m l Enter 

3. 
M-> C-r H T  C-a C-f C-SP C-e M-w
C-r < / h t m l > C-r Enter C-n 

4. 
C-r < ! C-f C-SP C-n C-n C-n C-f C-f C-f M-w
C-r log C-r C-n C-y

M-> C-r - - - C-u 5 C-b C-SP C-u 7 C-f M-w
C-r n e s . Enter M-f

M-> C-r - < ! C-r C-f C-SP C-n C-n C-e M-w
C-r S u C-r C-n C-n C-y

M-> D C-a C-f C-SP C-e M-w
C-r c s < / h 2 C-r C-n C-n C-y

M-> C-r d i f C-r C-a C-f C-SP C-n C-n
C-e M-w C-r n t < / C-n C-n C-y
5.

C-s - - - C-b C-b C-b C-SP M-> Backspace

6. 
C-x u

7. 
< ! - - M-> - - >

8. 
7 instances 

I found 7 instances. M-% < o l > Enter < o L >  Enter y y y y y y y

9. 
C-x C-c y

Exercise 1.5 
1. 
e m a c s Enter M-x m a k e - d i r e c t o r y Enter j u n k Enter

2. 
C-x C-f j u n k / h e l l o . c Enter

3.

M-x c o m p i l e Enter Backspace
Backspace Backspace Backspace
Backspace Backspace
Backspace Backspace g c c h e l l o . c Enter h e l l o

4.
C-x b h e l l o - o u t Enter
C-u M-! . / h e l l o Enter

5. 
C-SP M-> M-w C-x C-f k e y 1 . t x t  M-> M-x c l i p b o a r d - y a n k
Enter

#include <stdio.h>
int
main (void)
{
  char n = '\n';
  char b = '\\';
  char q = '"';
  
  char const *p = "#include <stdio.h>%cint%cmain (void)%c
  {%c  char n = '%cn';%c  char\
 b = '%c%c';%c  char q = '%c';%c  char const
 *p = %c%s%c;%c  printf (p, n, n, n, n, b\
 
, n, b, b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;
}

Exercise 1.6 

1. C-x b Enter 

2. (r a n d o m) C-j

3. ( s e t q SP x SP ( r a n d o m ) ) C-j ( s e t q SP y SP ( r a n d o m ) )
C-j

4. 
( - SP x SP y) C-j

I get the answer 886853162742869305, which is incorrect. 

5. 
M - : SP ( - SP x SP y) C-j 
There is no diffrence in the result, except also includes the octo
and decimal notation of the number. 

6. 
The integers are not truly random, because if
it were to be truly random in the mathematical sense,
it will have the get the answer with the infinite range.
Because we can't do that, we have to restrict it
by a certain range of values, which concludes that
it cannot be a truly random integer. 

7. 
We know that the integers will give you the
correct answer if the difference
falls within the upper and lower bounds of the range for integers.
Assuming we want truly random numbers, the range of these random
numbers would be infinite which leads to a huge amount of numbers
that would cause overflow. Thus, we can say that the probability
of overflow is very big because there are so many numbers that
can cause an overflow. 




for file in $directory
do
    for file2 in $directory
    do

#If both are regular files
if [ -f "$file" ] && [ -f "$file2" ]
then


    #Checks if not same
    if [ "$file" != "$file2" ]
    then
#    echo "$file"
 #   echo "$file2"
  #  echo "-------"
        cmp -s "$file" "$file2"
        if [ $? -eq 0 ]
        then

             #File 2 has a . remove file 1
             if [ "$(echo $file | head -c 1)" != '.' ] && [ "$(echo $file2 | head -c 1)" == '.' ]
             then
                 rm "$file"
                 ln "$file2" "$file"
                 echo "Hit 1"
             #File 1 has a . remove file 2
             elif [ "$(echo $file | head -c 1)" == '.' ] && [ "$(echo $file2 | head -c 1)" != '.' ]
             then
                 rm "$file2"
                 ln "$file" "$file2"
                 echo $file
                 echo $file2
                 echo "-------------------"
                 echo "Hit 2"
             elif [[ "$file" < "$file2" ]]
             then
                 rm "$file2"
                 ln "$file" "$file2"
                 echo $file
                 echo $file2
                 echo "Hit 3"
             else
                 rm "$file"
                 ln "$file2" "$file"
                 echo $file
                 echo $file2
                 echo "Hit 4"
              fi
          fi
     fi
fi
    done
done
