Michael Gee
004800083

I first get a copy of the coreutils using wget

wget http://web.cs.ucla.edu/classes/winter18/cs35L/assign/coreutils-with-bug.tar.gz

I then untar the zip file with the command: 

tar -xzvf coreutils-with-bug.tar.gz

I then enter the coreutils-with-bug directory and 
then configure the script in the directory:

cd coreutils-with-bug

./configure

After the configuration I try to run it but run into the error:

In file included from utimecmp.c:41:0:
utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^~~~~~~~
In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 'futimens' was here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;
            ^~~~~~~~
make[3]: *** [Makefile:659: utimecmp.o] Error 1
make[3]: Leaving directory '/w/home.11/cs/ugrad/michaelg/coreutils-with-bug/lib'
make[2]: *** [Makefile:414: all] Error 2
make[2]: Leaving directory '/w/home.11/cs/ugrad/michaelg/coreutils-with-bug/lib'
make[1]: *** [Makefile:419: all-recursive] Error 1
make[1]: Leaving directory '/w/home.11/cs/ugrad/michaelg/coreutils-with-bug'
make: *** [Makefile:357: all] Error 2

I thus need to get the patch from the web page so I use:

http://web.cs.ucla.edu/classes/winter18/cs35L/assign/coreutils.diff

I then apply the patch within the coreutils directory:

patch -p0 < coreutils.diff

I then type in ./configure and make to run it again
to see that it no longer had any errors.

I then see that it has a problem with functions
such as futimens so it renames them with the
coreutils at the bginning of each problematic
function. Because it renamed them, it enabled the
program to run and fixes all the files.

I then need to reproduce the ls -t bug so that
I can see how the buggy ls executable works.

$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1

-rw-r--r-- 1 michaelg csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice
-rw-r--r-- 1 michaelg csugrad 0 2018-02-10 22:57:58.557940618 +0000 now1
-rw-r--r-- 1 michaelg csugrad 0 2018-02-10 22:57:39.678625098 +0000 now

I then see that the armistice file is ordered in front of all the other
files.

I ran the gdb dubugger:

gdb ~/coreutils-with-bug/src/ls

and ran the command:
run -lt

to find whether I run the file
correctly.

I then try to find what went wrong
with which function so I decide to
use the command:

info functions

I then see that the three functions we needed to take a look at
and were under the ls.c file were: 

static int compare_atime(V, V);
static int compare_ctime(V, V);
static int compare_mtime(V, V);

I then set a break command for each function using:
break compare_mtime

After stepping through and stepping in using
si and s

a few times I get to the
function call:

/* Return negative, zero, positive if A < B, A == B, A > B, respectively.
   Assume the nanosecond components are in range, or close to it.  */
static inline int
timespec_cmp (struct timespec a, struct timespec b)
{
  int diff = a.tv_sec - b.tv_sec;
  return diff ? diff : a.tv_nsec - b.tv_nsec;
}

I then analyze this function and recognize that it may cause overflow
which would lead to incorrect dates to potentially be outputted.
Because there is a potential of signed overflow if there is a
huge difference between the two, thus leading to the date
getting printed as if it were in the future.

I then change the code to compare two structs
which allows it to no longer depend on subtraction when comparing
two numbers. So I first copied my timespec.h file in the lib directory:

cp timespec.h swagspec.h

I then use emacs to go the file and make the adjustments after
putting in the new code.

timespec_cmp (struct timespec a, struct timespec b)
{
  if (a.tv_sec < b.tv_sec) return -1;
  else if (b.tv_sec < a.tv_sec) return 1;
  return 0;
}

I first create the Changelog entry after googling what it is.

I then create the patch file using the command:

diff -u timespec.h swagspec.h > lab4.diff

I then patch it using the command:
patch -p0 < lab4.diff

I then see that the patch worked so I use the make command
and find whether it was changed or not.

Now I try the commands  again and see that I get the correct output:

-rw-r--r-- 1 michaelg csugrad 0 2018-02-11 01:06:25.142795001 +0000 now1
-rw-r--r-- 1 michaelg csugrad 0 2018-02-11 01:06:09.612535094 +0000 now
-rw-r--r-- 1 michaelg csugrad 0 1918-11-11 11:00:00.000000000 +0000 wwi-armistice

I then try to recreate the error in my home directory:
mkdir ye
cd ./ye
touch -d '1918-11-11 11:00 GMT' wwi-armistice
touch now
sleep 1
touch now1
TZ=UTC0 ls -lt --full-time wwi-armistice now now1

-rw-r--r-- 1 michaelg csugrad 0 2054-12-17 17:28:16.000000000 +0000 wwi-armistice
-rw-r--r-- 1 michaelg csugrad 0 2018-02-11 01:31:05.665528000 +0000 now1
-rw-r--r-- 1 michaelg csugrad 0 2018-02-11 01:30:50.017459000 +0000 now

When I try to reproduce the problem in my home directory, and
use the touch and ls utilities that are already installed, I get
the same issue as before where the wwi-armistice file is first rather
than last. This is because of the Linux file system using signed
32-bit time stamps unlike the SEASNET NFS filesystem which uses
32-bit unsigned time stamps. Because the SEASNET filesystem
gets the most significant bit to  be read as positive, it will be a greater
number than the local system which uses signed number. 
